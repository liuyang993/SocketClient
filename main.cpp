#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string>
#include <process.h>
#include "InterfaceOfAPI.hpp"
#include <time.h>
#include "ClientSocket.h"

using namespace std;


// Need to link with Ws2_32.lib, Mswsock.lib, and Advapi32.lib
#pragma comment (lib, "Ws2_32.lib")
#pragma comment (lib, "Mswsock.lib")
#pragma comment (lib, "AdvApi32.lib")


#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"

SOCKET ConnectSocket = INVALID_SOCKET;
char recvbuf[DEFAULT_BUFLEN];
int recvbuflen = DEFAULT_BUFLEN;


int RecMessagePort()
{
		//char acRetData[4096];
		int iStat = 0;
		memset(recvbuf,0,recvbuflen);

        iStat = recv(ConnectSocket, recvbuf, recvbuflen, 0);
		if(iStat == -1)
			return 0;
		cout<<"-->"<<recvbuf<<"\n";

		return 0;

}


void  MessageRecThread(LPVOID pParam)
{	
	while(1)
	{
		if(RecMessagePort())
			break;
	}
	return ;
}


int __cdecl main(int argc, char **argv) 
{
	CClientSocket socketClient;
	//socketClient.Connect("DESKTOP-DQPC13K",60001);
	socketClient.Connect("127.0.0.1",2020);    // test super socket 




	getchar();
	return 0;

    WSADATA wsaData;
    //SOCKET ConnectSocket = INVALID_SOCKET;
    struct addrinfo *result = NULL,
                    *ptr = NULL,
                    hints;
    char *sendbuf = "this is a test";

    //char recvbuf[DEFAULT_BUFLEN];
    int iResult;
    //int recvbuflen = DEFAULT_BUFLEN;
    
    // Validate the parameters
    //if (argc != 2) {
    //    printf("usage: %s server-name\n", argv[0]);
    //    return 1;
    //}

    // Initialize Winsock
    iResult = WSAStartup(MAKEWORD(2,2), &wsaData);
    if (iResult != 0) {
        printf("WSAStartup failed with error: %d\n", iResult);
        return 1;
    }

	SOCKADDR_IN target; //Socket address information
	target.sin_family = AF_INET; // address family Internet

	target.sin_port = htons (60001); //Port to connect on
	target.sin_addr.s_addr = inet_addr ("127.0.0.1");

	//target.sin_port = htons (8081); //Port to connect on
	//target.sin_addr.s_addr = inet_addr ("192.168.1.107"); //Target IP    //192.168.1.106

	ConnectSocket = socket (AF_INET, SOCK_STREAM, IPPROTO_TCP); //Create socket
	if (ConnectSocket == INVALID_SOCKET)
	{

		return false; //Couldn't create the socket
	}


		if (connect(ConnectSocket, (SOCKADDR *)&target, sizeof(target)) == SOCKET_ERROR)
	{

		return false; //Couldn't connect
	}




	/*
    ZeroMemory( &hints, sizeof(hints) );
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;

    // Resolve the server address and port
    iResult = getaddrinfo(argv[1], DEFAULT_PORT, &hints, &result);
    if ( iResult != 0 ) {
        printf("getaddrinfo failed with error: %d\n", iResult);
        WSACleanup();
        return 1;
    }

    // Attempt to connect to an address until one succeeds
    for(ptr=result; ptr != NULL ;ptr=ptr->ai_next) {

        // Create a SOCKET for connecting to server
        ConnectSocket = socket(ptr->ai_family, ptr->ai_socktype, 
            ptr->ai_protocol);
        if (ConnectSocket == INVALID_SOCKET) {
            printf("socket failed with error: %ld\n", WSAGetLastError());
            WSACleanup();
            return 1;
        }

        // Connect to server.
        iResult = connect( ConnectSocket, ptr->ai_addr, (int)ptr->ai_addrlen);
        if (iResult == SOCKET_ERROR) {
            closesocket(ConnectSocket);
            ConnectSocket = INVALID_SOCKET;
            continue;
        }
        break;
    }

	*/





    //freeaddrinfo(result);

    //if (ConnectSocket == INVALID_SOCKET) {
    //    printf("Unable to connect to server!\n");
    //    WSACleanup();
    //    return 1;7 
	//ly

    time_t timer;
    char buffer[26];
    struct tm* tm_info;

    time(&timer);
    tm_info = localtime(&timer);

    strftime(buffer, 26, "%Y-%m-%d %H:%M:%S", tm_info);
    puts(buffer);

    DWORD nLastTick = GetTickCount();
	int iSended = 0;

		const int size = 11;
    //char maze[ 30 ][ size ] = {
    //        "Gh0st00000",
    //        "Gh0st00001",
    //        "Gh0st00002",
    //        "Gh0st00003",
    //        "Gh0st00004",
    //        "Gh0st00005",
    //        "Gh0st00006",
    //        "Gh0st00007",
    //        "Gh0st00008",
    //        "Gh0st00009",
    //        "Gh0st00010",
    //        "Gh0st00011",
    //        "Gh0st00012",
    //        "Gh0st00013",
    //        "Gh0st00014",
    //        "Gh0st00015",
    //        "Gh0st00016",
    //        "Gh0st00017",
    //        "Gh0st00018",
    //        "Gh0st00019",
    //        "Gh0st00020",
    //        "Gh0st00021",
    //        "Gh0st00022",
    //        "Gh0st00023",
    //        "Gh0st00024",
    //        "Gh0st00025",
    //        "Gh0st00026",
    //        "Gh0st00027",
    //        "Gh0st00028",
    //        "Gh0st00029",
    //    };

    char maze[ 1160 ][ size ] = {
		"Gh0st00000",
		"Gh0st00001",
		"Gh0st00002",
		"Gh0st00003",
		"Gh0st00004",
		"Gh0st00005",
		"Gh0st00006",
		"Gh0st00007",
		"Gh0st00008",
		"Gh0st00009",
		"Gh0st00010",
		"Gh0st00011",
		"Gh0st00012",
		"Gh0st00013",
		"Gh0st00014",
		"Gh0st00015",
		"Gh0st00016",
		"Gh0st00017",
		"Gh0st00018",
		"Gh0st00019",
		"Gh0st00020",
		"Gh0st00021",
		"Gh0st00022",
		"Gh0st00023",
		"Gh0st00024",
		"Gh0st00025",
		"Gh0st00026",
		"Gh0st00027",
		"Gh0st00028",
		"Gh0st00029",
		"Gh0st00030",
		"Gh0st00031",
		"Gh0st00032",
		"Gh0st00033",
		"Gh0st00034",
		"Gh0st00035",
		"Gh0st00036",
		"Gh0st00037",
		"Gh0st00038",
		"Gh0st00039",
		"Gh0st00040",
		"Gh0st00041",
		"Gh0st00042",
		"Gh0st00043",
		"Gh0st00044",
		"Gh0st00045",
		"Gh0st00046",
		"Gh0st00047",
		"Gh0st00048",
		"Gh0st00049",
		"Gh0st00050",
		"Gh0st00051",
		"Gh0st00052",
		"Gh0st00053",
		"Gh0st00054",
		"Gh0st00055",
		"Gh0st00056",
		"Gh0st00057",
		"Gh0st00058",
		"Gh0st00059",
		"Gh0st00060",
		"Gh0st00061",
		"Gh0st00062",
		"Gh0st00063",
		"Gh0st00064",
		"Gh0st00065",
		"Gh0st00066",
		"Gh0st00067",
		"Gh0st00068",
		"Gh0st00069",
		"Gh0st00070",
		"Gh0st00071",
		"Gh0st00072",
		"Gh0st00073",
		"Gh0st00074",
		"Gh0st00075",
		"Gh0st00076",
		"Gh0st00077",
		"Gh0st00078",
		"Gh0st00079",
		"Gh0st00080",
		"Gh0st00081",
		"Gh0st00082",
		"Gh0st00083",
		"Gh0st00084",
		"Gh0st00085",
		"Gh0st00086",
		"Gh0st00087",
		"Gh0st00088",
		"Gh0st00089",
		"Gh0st00090",
		"Gh0st00091",
		"Gh0st00092",
		"Gh0st00093",
		"Gh0st00094",
		"Gh0st00095",
		"Gh0st00096",
		"Gh0st00097",
		"Gh0st00098",
		"Gh0st00099",
		"Gh0st00100",
		"Gh0st00101",
		"Gh0st00102",
		"Gh0st00103",
		"Gh0st00104",
		"Gh0st00105",
		"Gh0st00106",
		"Gh0st00107",
		"Gh0st00108",
		"Gh0st00109",
		"Gh0st00110",
		"Gh0st00111",
		"Gh0st00112",
		"Gh0st00113",
		"Gh0st00114",
		"Gh0st00115",
		"Gh0st00116",
		"Gh0st00117",
		"Gh0st00118",
		"Gh0st00119",
		"Gh0st00120",
		"Gh0st00121",
		"Gh0st00122",
		"Gh0st00123",
		"Gh0st00124",
		"Gh0st00125",
		"Gh0st00126",
		"Gh0st00127",
		"Gh0st00128",
		"Gh0st00129",
		"Gh0st00130",
		"Gh0st00131",
		"Gh0st00132",
		"Gh0st00133",
		"Gh0st00134",
		"Gh0st00135",
		"Gh0st00136",
		"Gh0st00137",
		"Gh0st00138",
		"Gh0st00139",
		"Gh0st00140",
		"Gh0st00141",
		"Gh0st00142",
		"Gh0st00143",
		"Gh0st00144",
		"Gh0st00145",
		"Gh0st00146",
		"Gh0st00147",
		"Gh0st00148",
		"Gh0st00149",
		"Gh0st00150",
		"Gh0st00151",
		"Gh0st00152",
		"Gh0st00153",
		"Gh0st00154",
		"Gh0st00155",
		"Gh0st00156",
		"Gh0st00157",
		"Gh0st00158",
		"Gh0st00159",
		"Gh0st00160",
		"Gh0st00161",
		"Gh0st00162",
		"Gh0st00163",
		"Gh0st00164",
		"Gh0st00165",
		"Gh0st00166",
		"Gh0st00167",
		"Gh0st00168",
		"Gh0st00169",
		"Gh0st00170",
		"Gh0st00171",
		"Gh0st00172",
		"Gh0st00173",
		"Gh0st00174",
		"Gh0st00175",
		"Gh0st00176",
		"Gh0st00177",
		"Gh0st00178",
		"Gh0st00179",
		"Gh0st00180",
		"Gh0st00181",
		"Gh0st00182",
		"Gh0st00183",
		"Gh0st00184",
		"Gh0st00185",
		"Gh0st00186",
		"Gh0st00187",
		"Gh0st00188",
		"Gh0st00189",
		"Gh0st00190",
		"Gh0st00191",
		"Gh0st00192",
		"Gh0st00193",
		"Gh0st00194",
		"Gh0st00195",
		"Gh0st00196",
		"Gh0st00197",
		"Gh0st00198",
		"Gh0st00199",
		"Gh0st00200",
		"Gh0st00201",
		"Gh0st00202",
		"Gh0st00203",
		"Gh0st00204",
		"Gh0st00205",
		"Gh0st00206",
		"Gh0st00207",
		"Gh0st00208",
		"Gh0st00209",
		"Gh0st00210",
		"Gh0st00211",
		"Gh0st00212",
		"Gh0st00213",
		"Gh0st00214",
		"Gh0st00215",
		"Gh0st00216",
		"Gh0st00217",
		"Gh0st00218",
		"Gh0st00219",
		"Gh0st00220",
		"Gh0st00221",
		"Gh0st00222",
		"Gh0st00223",
		"Gh0st00224",
		"Gh0st00225",
		"Gh0st00226",
		"Gh0st00227",
		"Gh0st00228",
		"Gh0st00229",
		"Gh0st00230",
		"Gh0st00231",
		"Gh0st00232",
		"Gh0st00233",
		"Gh0st00234",
		"Gh0st00235",
		"Gh0st00236",
		"Gh0st00237",
		"Gh0st00238",
		"Gh0st00239",
		"Gh0st00240",
		"Gh0st00241",
		"Gh0st00242",
		"Gh0st00243",
		"Gh0st00244",
		"Gh0st00245",
		"Gh0st00246",
		"Gh0st00247",
		"Gh0st00248",
		"Gh0st00249",
		"Gh0st00250",
		"Gh0st00251",
		"Gh0st00252",
		"Gh0st00253",
		"Gh0st00254",
		"Gh0st00255",
		"Gh0st00256",
		"Gh0st00257",
		"Gh0st00258",
		"Gh0st00259",
		"Gh0st00260",
		"Gh0st00261",
		"Gh0st00262",
		"Gh0st00263",
		"Gh0st00264",
		"Gh0st00265",
		"Gh0st00266",
		"Gh0st00267",
		"Gh0st00268",
		"Gh0st00269",
		"Gh0st00270",
		"Gh0st00271",
		"Gh0st00272",
		"Gh0st00273",
		"Gh0st00274",
		"Gh0st00275",
		"Gh0st00276",
		"Gh0st00277",
		"Gh0st00278",
		"Gh0st00279",
		"Gh0st00280",
		"Gh0st00281",
		"Gh0st00282",
		"Gh0st00283",
		"Gh0st00284",
		"Gh0st00285",
		"Gh0st00286",
		"Gh0st00287",
		"Gh0st00288",
		"Gh0st00289",
		"Gh0st00290",
		"Gh0st00291",
		"Gh0st00292",
		"Gh0st00293",
		"Gh0st00294",
		"Gh0st00295",
		"Gh0st00296",
		"Gh0st00297",
		"Gh0st00298",
		"Gh0st00299",
		"Gh0st00300",
		"Gh0st00301",
		"Gh0st00302",
		"Gh0st00303",
		"Gh0st00304",
		"Gh0st00305",
		"Gh0st00306",
		"Gh0st00307",
		"Gh0st00308",
		"Gh0st00309",
		"Gh0st00310",
		"Gh0st00311",
		"Gh0st00312",
		"Gh0st00313",
		"Gh0st00314",
		"Gh0st00315",
		"Gh0st00316",
		"Gh0st00317",
		"Gh0st00318",
		"Gh0st00319",
		"Gh0st00320",
		"Gh0st00321",
		"Gh0st00322",
		"Gh0st00323",
		"Gh0st00324",
		"Gh0st00325",
		"Gh0st00326",
		"Gh0st00327",
		"Gh0st00328",
		"Gh0st00329",
		"Gh0st00330",
		"Gh0st00331",
		"Gh0st00332",
		"Gh0st00333",
		"Gh0st00334",
		"Gh0st00335",
		"Gh0st00336",
		"Gh0st00337",
		"Gh0st00338",
		"Gh0st00339",
		"Gh0st00340",
		"Gh0st00341",
		"Gh0st00342",
		"Gh0st00343",
		"Gh0st00344",
		"Gh0st00345",
		"Gh0st00346",
		"Gh0st00347",
		"Gh0st00348",
		"Gh0st00349",
		"Gh0st00350",
		"Gh0st00351",
		"Gh0st00352",
		"Gh0st00353",
		"Gh0st00354",
		"Gh0st00355",
		"Gh0st00356",
		"Gh0st00357",
		"Gh0st00358",
		"Gh0st00359",
		"Gh0st00360",
		"Gh0st00361",
		"Gh0st00362",
		"Gh0st00363",
		"Gh0st00364",
		"Gh0st00365",
		"Gh0st00366",
		"Gh0st00367",
		"Gh0st00368",
		"Gh0st00369",
		"Gh0st00370",
		"Gh0st00371",
		"Gh0st00372",
		"Gh0st00373",
		"Gh0st00374",
		"Gh0st00375",
		"Gh0st00376",
		"Gh0st00377",
		"Gh0st00378",
		"Gh0st00379",
		"Gh0st00380",
		"Gh0st00381",
		"Gh0st00382",
		"Gh0st00383",
		"Gh0st00384",
		"Gh0st00385",
		"Gh0st00386",
		"Gh0st00387",
		"Gh0st00388",
		"Gh0st00389",
		"Gh0st00390",
		"Gh0st00391",
		"Gh0st00392",
		"Gh0st00393",
		"Gh0st00394",
		"Gh0st00395",
		"Gh0st00396",
		"Gh0st00397",
		"Gh0st00398",
		"Gh0st00399",
		"Gh0st00400",
		"Gh0st00401",
		"Gh0st00402",
		"Gh0st00403",
		"Gh0st00404",
		"Gh0st00405",
		"Gh0st00406",
		"Gh0st00407",
		"Gh0st00408",
		"Gh0st00409",
		"Gh0st00410",
		"Gh0st00411",
		"Gh0st00412",
		"Gh0st00413",
		"Gh0st00414",
		"Gh0st00415",
		"Gh0st00416",
		"Gh0st00417",
		"Gh0st00418",
		"Gh0st00419",
		"Gh0st00420",
		"Gh0st00421",
		"Gh0st00422",
		"Gh0st00423",
		"Gh0st00424",
		"Gh0st00425",
		"Gh0st00426",
		"Gh0st00427",
		"Gh0st00428",
		"Gh0st00429",
		"Gh0st00430",
		"Gh0st00431",
		"Gh0st00432",
		"Gh0st00433",
		"Gh0st00434",
		"Gh0st00435",
		"Gh0st00436",
		"Gh0st00437",
		"Gh0st00438",
		"Gh0st00439",
		"Gh0st00440",
		"Gh0st00441",
		"Gh0st00442",
		"Gh0st00443",
		"Gh0st00444",
		"Gh0st00445",
		"Gh0st00446",
		"Gh0st00447",
		"Gh0st00448",
		"Gh0st00449",
		"Gh0st00450",
		"Gh0st00451",
		"Gh0st00452",
		"Gh0st00453",
		"Gh0st00454",
		"Gh0st00455",
		"Gh0st00456",
		"Gh0st00457",
		"Gh0st00458",
		"Gh0st00459",
		"Gh0st00460",
		"Gh0st00461",
		"Gh0st00462",
		"Gh0st00463",
		"Gh0st00464",
		"Gh0st00465",
		"Gh0st00466",
		"Gh0st00467",
		"Gh0st00468",
		"Gh0st00469",
		"Gh0st00470",
		"Gh0st00471",
		"Gh0st00472",
		"Gh0st00473",
		"Gh0st00474",
		"Gh0st00475",
		"Gh0st00476",
		"Gh0st00477",
		"Gh0st00478",
		"Gh0st00479",
		"Gh0st00480",
		"Gh0st00481",
		"Gh0st00482",
		"Gh0st00483",
		"Gh0st00484",
		"Gh0st00485",
		"Gh0st00486",
		"Gh0st00487",
		"Gh0st00488",
		"Gh0st00489",
		"Gh0st00490",
		"Gh0st00491",
		"Gh0st00492",
		"Gh0st00493",
		"Gh0st00494",
		"Gh0st00495",
		"Gh0st00496",
		"Gh0st00497",
		"Gh0st00498",
		"Gh0st00499",
		"Gh0st00500",
		"Gh0st00501",
		"Gh0st00502",
		"Gh0st00503",
		"Gh0st00504",
		"Gh0st00505",
		"Gh0st00506",
		"Gh0st00507",
		"Gh0st00508",
		"Gh0st00509",
		"Gh0st00510",
		"Gh0st00511",
		"Gh0st00512",
		"Gh0st00513",
		"Gh0st00514",
		"Gh0st00515",
		"Gh0st00516",
		"Gh0st00517",
		"Gh0st00518",
		"Gh0st00519",
		"Gh0st00520",
		"Gh0st00521",
		"Gh0st00522",
		"Gh0st00523",
		"Gh0st00524",
		"Gh0st00525",
		"Gh0st00526",
		"Gh0st00527",
		"Gh0st00528",
		"Gh0st00529",
		"Gh0st00530",
		"Gh0st00531",
		"Gh0st00532",
		"Gh0st00533",
		"Gh0st00534",
		"Gh0st00535",
		"Gh0st00536",
		"Gh0st00537",
		"Gh0st00538",
		"Gh0st00539",
		"Gh0st00540",
		"Gh0st00541",
		"Gh0st00542",
		"Gh0st00543",
		"Gh0st00544",
		"Gh0st00545",
		"Gh0st00546",
		"Gh0st00547",
		"Gh0st00548",
		"Gh0st00549",
		"Gh0st00550",
		"Gh0st00551",
		"Gh0st00552",
		"Gh0st00553",
		"Gh0st00554",
		"Gh0st00555",
		"Gh0st00556",
		"Gh0st00557",
		"Gh0st00558",
		"Gh0st00559",
		"Gh0st00560",
		"Gh0st00561",
		"Gh0st00562",
		"Gh0st00563",
		"Gh0st00564",
		"Gh0st00565",
		"Gh0st00566",
		"Gh0st00567",
		"Gh0st00568",
		"Gh0st00569",
		"Gh0st00570",
		"Gh0st00571",
		"Gh0st00572",
		"Gh0st00573",
		"Gh0st00574",
		"Gh0st00575",
		"Gh0st00576",
		"Gh0st00577",
		"Gh0st00578",
		"Gh0st00579",
		"Gh0st00580",
		"Gh0st00581",
		"Gh0st00582",
		"Gh0st00583",
		"Gh0st00584",
		"Gh0st00585",
		"Gh0st00586",
		"Gh0st00587",
		"Gh0st00588",
		"Gh0st00589",
		"Gh0st00590",
		"Gh0st00591",
		"Gh0st00592",
		"Gh0st00593",
		"Gh0st00594",
		"Gh0st00595",
		"Gh0st00596",
		"Gh0st00597",
		"Gh0st00598",
		"Gh0st00599",
		"Gh0st00600",
		"Gh0st00601",
		"Gh0st00602",
		"Gh0st00603",
		"Gh0st00604",
		"Gh0st00605",
		"Gh0st00606",
		"Gh0st00607",
		"Gh0st00608",
		"Gh0st00609",
		"Gh0st00610",
		"Gh0st00611",
		"Gh0st00612",
		"Gh0st00613",
		"Gh0st00614",
		"Gh0st00615",
		"Gh0st00616",
		"Gh0st00617",
		"Gh0st00618",
		"Gh0st00619",
		"Gh0st00620",
		"Gh0st00621",
		"Gh0st00622",
		"Gh0st00623",
		"Gh0st00624",
		"Gh0st00625",
		"Gh0st00626",
		"Gh0st00627",
		"Gh0st00628",
		"Gh0st00629",
		"Gh0st00630",
		"Gh0st00631",
		"Gh0st00632",
		"Gh0st00633",
		"Gh0st00634",
		"Gh0st00635",
		"Gh0st00636",
		"Gh0st00637",
		"Gh0st00638",
		"Gh0st00639",
		"Gh0st00640",
		"Gh0st00641",
		"Gh0st00642",
		"Gh0st00643",
		"Gh0st00644",
		"Gh0st00645",
		"Gh0st00646",
		"Gh0st00647",
		"Gh0st00648",
		"Gh0st00649",
		"Gh0st00650",
		"Gh0st00651",
		"Gh0st00652",
		"Gh0st00653",
		"Gh0st00654",
		"Gh0st00655",
		"Gh0st00656",
		"Gh0st00657",
		"Gh0st00658",
		"Gh0st00659",
		"Gh0st00660",
		"Gh0st00661",
		"Gh0st00662",
		"Gh0st00663",
		"Gh0st00664",
		"Gh0st00665",
		"Gh0st00666",
		"Gh0st00667",
		"Gh0st00668",
		"Gh0st00669",
		"Gh0st00670",
		"Gh0st00671",
		"Gh0st00672",
		"Gh0st00673",
		"Gh0st00674",
		"Gh0st00675",
		"Gh0st00676",
		"Gh0st00677",
		"Gh0st00678",
		"Gh0st00679",
		"Gh0st00680",
		"Gh0st00681",
		"Gh0st00682",
		"Gh0st00683",
		"Gh0st00684",
		"Gh0st00685",
		"Gh0st00686",
		"Gh0st00687",
		"Gh0st00688",
		"Gh0st00689",
		"Gh0st00690",
		"Gh0st00691",
		"Gh0st00692",
		"Gh0st00693",
		"Gh0st00694",
		"Gh0st00695",
		"Gh0st00696",
		"Gh0st00697",
		"Gh0st00698",
		"Gh0st00699",
		"Gh0st00700",
		"Gh0st00701",
		"Gh0st00702",
		"Gh0st00703",
		"Gh0st00704",
		"Gh0st00705",
		"Gh0st00706",
		"Gh0st00707",
		"Gh0st00708",
		"Gh0st00709",
		"Gh0st00710",
		"Gh0st00711",
		"Gh0st00712",
		"Gh0st00713",
		"Gh0st00714",
		"Gh0st00715",
		"Gh0st00716",
		"Gh0st00717",
		"Gh0st00718",
		"Gh0st00719",
		"Gh0st00720",
		"Gh0st00721",
		"Gh0st00722",
		"Gh0st00723",
		"Gh0st00724",
		"Gh0st00725",
		"Gh0st00726",
		"Gh0st00727",
		"Gh0st00728",
		"Gh0st00729",
		"Gh0st00730",
		"Gh0st00731",
		"Gh0st00732",
		"Gh0st00733",
		"Gh0st00734",
		"Gh0st00735",
		"Gh0st00736",
		"Gh0st00737",
		"Gh0st00738",
		"Gh0st00739",
		"Gh0st00740",
		"Gh0st00741",
		"Gh0st00742",
		"Gh0st00743",
		"Gh0st00744",
		"Gh0st00745",
		"Gh0st00746",
		"Gh0st00747",
		"Gh0st00748",
		"Gh0st00749",
		"Gh0st00750",
		"Gh0st00751",
		"Gh0st00752",
		"Gh0st00753",
		"Gh0st00754",
		"Gh0st00755",
		"Gh0st00756",
		"Gh0st00757",
		"Gh0st00758",
		"Gh0st00759",
		"Gh0st00760",
		"Gh0st00761",
		"Gh0st00762",
		"Gh0st00763",
		"Gh0st00764",
		"Gh0st00765",
		"Gh0st00766",
		"Gh0st00767",
		"Gh0st00768",
		"Gh0st00769",
		"Gh0st00770",
		"Gh0st00771",
		"Gh0st00772",
		"Gh0st00773",
		"Gh0st00774",
		"Gh0st00775",
		"Gh0st00776",
		"Gh0st00777",
		"Gh0st00778",
		"Gh0st00779",
		"Gh0st00780",
		"Gh0st00781",
		"Gh0st00782",
		"Gh0st00783",
		"Gh0st00784",
		"Gh0st00785",
		"Gh0st00786",
		"Gh0st00787",
		"Gh0st00788",
		"Gh0st00789",
		"Gh0st00790",
		"Gh0st00791",
		"Gh0st00792",
		"Gh0st00793",
		"Gh0st00794",
		"Gh0st00795",
		"Gh0st00796",
		"Gh0st00797",
		"Gh0st00798",
		"Gh0st00799",
		"Gh0st00800",
		"Gh0st00801",
		"Gh0st00802",
		"Gh0st00803",
		"Gh0st00804",
		"Gh0st00805",
		"Gh0st00806",
		"Gh0st00807",
		"Gh0st00808",
		"Gh0st00809",
		"Gh0st00810",
		"Gh0st00811",
		"Gh0st00812",
		"Gh0st00813",
		"Gh0st00814",
		"Gh0st00815",
		"Gh0st00816",
		"Gh0st00817",
		"Gh0st00818",
		"Gh0st00819",
		"Gh0st00820",
		"Gh0st00821",
		"Gh0st00822",
		"Gh0st00823",
		"Gh0st00824",
		"Gh0st00825",
		"Gh0st00826",
		"Gh0st00827",
		"Gh0st00828",
		"Gh0st00829",
		"Gh0st00830",
		"Gh0st00831",
		"Gh0st00832",
		"Gh0st00833",
		"Gh0st00834",
		"Gh0st00835",
		"Gh0st00836",
		"Gh0st00837",
		"Gh0st00838",
		"Gh0st00839",
		"Gh0st00840",
		"Gh0st00841",
		"Gh0st00842",
		"Gh0st00843",
		"Gh0st00844",
		"Gh0st00845",
		"Gh0st00846",
		"Gh0st00847",
		"Gh0st00848",
		"Gh0st00849",
		"Gh0st00850",
		"Gh0st00851",
		"Gh0st00852",
		"Gh0st00853",
		"Gh0st00854",
		"Gh0st00855",
		"Gh0st00856",
		"Gh0st00857",
		"Gh0st00858",
		"Gh0st00859",
		"Gh0st00860",
		"Gh0st00861",
		"Gh0st00862",
		"Gh0st00863",
		"Gh0st00864",
		"Gh0st00865",
		"Gh0st00866",
		"Gh0st00867",
		"Gh0st00868",
		"Gh0st00869",
		"Gh0st00870",
		"Gh0st00871",
		"Gh0st00872",
		"Gh0st00873",
		"Gh0st00874",
		"Gh0st00875",
		"Gh0st00876",
		"Gh0st00877",
		"Gh0st00878",
		"Gh0st00879",
		"Gh0st00880",
		"Gh0st00881",
		"Gh0st00882",
		"Gh0st00883",
		"Gh0st00884",
		"Gh0st00885",
		"Gh0st00886",
		"Gh0st00887",
		"Gh0st00888",
		"Gh0st00889",
		"Gh0st00890",
		"Gh0st00891",
		"Gh0st00892",
		"Gh0st00893",
		"Gh0st00894",
		"Gh0st00895",
		"Gh0st00896",
		"Gh0st00897",
		"Gh0st00898",
		"Gh0st00899",
		"Gh0st00900",
		"Gh0st00901",
		"Gh0st00902",
		"Gh0st00903",
		"Gh0st00904",
		"Gh0st00905",
		"Gh0st00906",
		"Gh0st00907",
		"Gh0st00908",
		"Gh0st00909",
		"Gh0st00910",
		"Gh0st00911",
		"Gh0st00912",
		"Gh0st00913",
		"Gh0st00914",
		"Gh0st00915",
		"Gh0st00916",
		"Gh0st00917",
		"Gh0st00918",
		"Gh0st00919",
		"Gh0st00920",
		"Gh0st00921",
		"Gh0st00922",
		"Gh0st00923",
		"Gh0st00924",
		"Gh0st00925",
		"Gh0st00926",
		"Gh0st00927",
		"Gh0st00928",
		"Gh0st00929",
		"Gh0st00930",
		"Gh0st00931",
		"Gh0st00932",
		"Gh0st00933",
		"Gh0st00934",
		"Gh0st00935",
		"Gh0st00936",
		"Gh0st00937",
		"Gh0st00938",
		"Gh0st00939",
		"Gh0st00940",
		"Gh0st00941",
		"Gh0st00942",
		"Gh0st00943",
		"Gh0st00944",
		"Gh0st00945",
		"Gh0st00946",
		"Gh0st00947",
		"Gh0st00948",
		"Gh0st00949",
		"Gh0st00950",
		"Gh0st00951",
		"Gh0st00952",
		"Gh0st00953",
		"Gh0st00954",
		"Gh0st00955",
		"Gh0st00956",
		"Gh0st00957",
		"Gh0st00958",
		"Gh0st00959",
		"Gh0st00960",
		"Gh0st00961",
		"Gh0st00962",
		"Gh0st00963",
		"Gh0st00964",
		"Gh0st00965",
		"Gh0st00966",
		"Gh0st00967",
		"Gh0st00968",
		"Gh0st00969",
		"Gh0st00970",
		"Gh0st00971",
		"Gh0st00972",
		"Gh0st00973",
		"Gh0st00974",
		"Gh0st00975",
		"Gh0st00976",
		"Gh0st00977",
		"Gh0st00978",
		"Gh0st00979",
		"Gh0st00980",
		"Gh0st00981",
		"Gh0st00982",
		"Gh0st00983",
		"Gh0st00984",
		"Gh0st00985",
		"Gh0st00986",
		"Gh0st00987",
		"Gh0st00988",
		"Gh0st00989",
		"Gh0st00990",
		"Gh0st00991",
		"Gh0st00992",
		"Gh0st00993",
		"Gh0st00994",
		"Gh0st00995",
		"Gh0st00996",
		"Gh0st00997",
		"Gh0st00998",
		"Gh0st00999",
		"Gh0st01000",
		"Gh0st01001",
		"Gh0st01002",
		"Gh0st01003",
		"Gh0st01004",
		"Gh0st01005",
		"Gh0st01006",
		"Gh0st01007",
		"Gh0st01008",
		"Gh0st01009",
		"Gh0st01010",
		"Gh0st01011",
		"Gh0st01012",
		"Gh0st01013",
		"Gh0st01014",
		"Gh0st01015",
		"Gh0st01016",
		"Gh0st01017",
		"Gh0st01018",
		"Gh0st01019",
		"Gh0st01020",
		"Gh0st01021",
		"Gh0st01022",
		"Gh0st01023",
		"Gh0st01024",
		"Gh0st01025",
		"Gh0st01026",
		"Gh0st01027",
		"Gh0st01028",
		"Gh0st01029",
		"Gh0st01030",
		"Gh0st01031",
		"Gh0st01032",
		"Gh0st01033",
		"Gh0st01034",
		"Gh0st01035",
		"Gh0st01036",
		"Gh0st01037",
		"Gh0st01038",
		"Gh0st01039",
		"Gh0st01040",
		"Gh0st01041",
		"Gh0st01042",
		"Gh0st01043",
		"Gh0st01044",
		"Gh0st01045",
		"Gh0st01046",
		"Gh0st01047",
		"Gh0st01048",
		"Gh0st01049",
		"Gh0st01050",
		"Gh0st01051",
		"Gh0st01052",
		"Gh0st01053",
		"Gh0st01054",
		"Gh0st01055",
		"Gh0st01056",
		"Gh0st01057",
		"Gh0st01058",
		"Gh0st01059",
		"Gh0st01060",
		"Gh0st01061",
		"Gh0st01062",
		"Gh0st01063",
		"Gh0st01064",
		"Gh0st01065",
		"Gh0st01066",
		"Gh0st01067",
		"Gh0st01068",
		"Gh0st01069",
		"Gh0st01070",
		"Gh0st01071",
		"Gh0st01072",
		"Gh0st01073",
		"Gh0st01074",
		"Gh0st01075",
		"Gh0st01076",
		"Gh0st01077",
		"Gh0st01078",
		"Gh0st01079",
		"Gh0st01080",
		"Gh0st01081",
		"Gh0st01082",
		"Gh0st01083",
		"Gh0st01084",
		"Gh0st01085",
		"Gh0st01086",
		"Gh0st01087",
		"Gh0st01088",
		"Gh0st01089",
		"Gh0st01090",
		"Gh0st01091",
		"Gh0st01092",
		"Gh0st01093",
		"Gh0st01094",
		"Gh0st01095",
		"Gh0st01096",
		"Gh0st01097",
		"Gh0st01098",
		"Gh0st01099",
		"Gh0st01100",
		"Gh0st01101",
		"Gh0st01102",
		"Gh0st01103",
        };

	do
	{

	//cout << "Please enter a string to send:\n";
	//string input = "";
	//getline(cin, input);

	GetOperator GO1 = { "Gh0stHamilton123456","60123456789" };    
	//char cTest[] = "Gh0st000000Gh0st000111Gh0st000222";

	char cTest[11] = "Gh0st00000";



	
	char request[11];
	//memcpy(request,&cTest,11);
	memcpy(request,&maze[iSended],11);

   int iLen =11;
   iResult = send(ConnectSocket, request, 11, 0 );
   //iResult = WSASend(ConnectSocket, (LPWSABUF)request, 1, (LPDWORD)&iLen,MSG_PARTIAL,NULL,NULL);

   iSended++;

	//ly
    // Send an initial buffer
    //iResult = send( ConnectSocket, sendbuf, (int)strlen(sendbuf), 0 );
	
	if (iResult == SOCKET_ERROR) {
        printf("send failed with error: %d\n", WSAGetLastError());
        closesocket(ConnectSocket);
        WSACleanup();
        return 1;
    }

    printf("Bytes Sent: %ld\n", iResult);

		//	char temp[256];
		//memset(temp,0,256); 
	
		//iResult = recv(ConnectSocket, temp, 256, 0);
		//if (iResult>0)
		//printf("recv from server: %s\n", temp);


	//Sleep(1000);

	//}while(GetTickCount() - nLastTick <= 1000);
	}while(iSended<1);

	while(1)
	{
		char temp[256];
		memset(temp,0,256); 
	
		iResult = recv(ConnectSocket, temp, 256, 0);
		if (iResult>0)
		printf("recv from server: %s\n", temp);


	}



	time(&timer);
	    tm_info = localtime(&timer);

    strftime(buffer, 26, "%Y-%m-%d %H:%M:%S", tm_info);
    puts(buffer);

	printf("total send %d times",iSended);

    // cleanup
    closesocket(ConnectSocket);
    WSACleanup();

	getchar();

    return 0;
}
